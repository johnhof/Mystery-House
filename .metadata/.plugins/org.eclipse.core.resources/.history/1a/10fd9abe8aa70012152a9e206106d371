import org.newdawn.slick.*;
import org.newdawn.slick.tiled.TiledMap;

public class ObjectFactory implements Constants{
	
	//generate a tilemap from a tile map path
	public static TiledMap genMap(String mapPath)
	{
		try 
		{
			return new TiledMap(mapPath);
		} catch (SlickException e) {
			System.out.print("ERROR: map generation failed");
			e.printStackTrace();
			return null;
		}
	}
	
	//generate an animation from an array of image paths and durations
	public static Animation genAnimation(String[] imgPaths, int [] duration)
	{
		Image [] imgArray = new Image [imgPaths.length];
		for(int i = 0; i < imgPaths.length; i++)
		{
			try 
			{
				imgArray[i] = new Image(imgPaths[i]);
			} catch (SlickException e) 
			{
				System.out.print("ERROR: Image loading failed during Animation generation");
				e.printStackTrace();
				return null;
			}
		}
		return new Animation(imgArray, duration, false);
	}
	
	public static boolean[][] GenMapBorders(TiledMap map)
	{
		boolean[][] blocked = new boolean[map.getWidth()][map.getHeight()];
		System.out.println("width: "+map.getWidth()+", height: "+map.getHeight());
	    for (int xAxis=0;xAxis<map.getWidth(); xAxis++)
	    {
	    	System.out.print("xloop-");
	        for (int yAxis=0;yAxis<map.getHeight(); yAxis++)
	        {
	    		System.out.print("yloop-");
	        	int tileID = map.getTileId(xAxis, yAxis, 0);
	        	String value = map.getTileProperty(tileID, "blocked", "false");
	        	System.out.println("ID: "+tileID+", value:"+value);
	        	if ("true".equals(value))
	        	{
	        		System.out.println("X: "+xAxis+", Y: "+yAxis);
	        		blocked[xAxis][yAxis] = true;
	            }
	        }
	    }
	    return blocked;
	}
}
